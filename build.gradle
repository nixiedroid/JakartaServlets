import java.text.SimpleDateFormat

plugins {
    id 'application'
//   id 'com.github.johnrengelman.shadow'
    id 'war'
}

group 'com.nixiedroid.jakarta'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

//shadowJar{
//    archiveClassifier.set('fat')
//    minimize {
//
//    }
//}

war {
    enabled=true
}
application {
    mainClass = "com.nixiedroid.jakarta.rest.AppLauncher"
}



ext {
    junitVersion = '5.10.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1')
    compileOnly('jakarta.ws.rs:jakarta.ws.rs-api:3.1.0')
    compileOnly('jakarta.servlet:jakarta.servlet-api:6.0.0')
    implementation('org.hibernate:hibernate-core:6.3.1.Final')
    implementation('org.glassfish.jaxb:jaxb-runtime:4.0.3')
    implementation('org.hibernate.validator:hibernate-validator:8.0.1.Final')

    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-jasper
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.24'

    // https://mvnrepository.com/artifact/jakarta.servlet.jsp.jstl/jakarta.servlet.jsp.jstl-api
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                //'Add-Opens': 'java.prefs/java.util.prefs',
                "Main-Class": application.mainClass,
                "Created-By"            : "Gradle ${gradle.gradleVersion}",
                "Build-Timestamp"       : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Build-Jdk"             : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                "Build-OS"              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
    from {
        configurations.runtimeClasspath.collect {
             it.isDirectory() ? it : zipTree(it)

        }
    }
    exclude("module-info.class")
    exclude("META-INF/ECLIPSE_.SF")
    exclude("META-INF/ECLIPSE_.RSA")
    exclude("META-INF/LICENSE.md")
    exclude("META-INF/LICENSE")
    exclude("META-INF/NOTICE")
    exclude("META-INF/NOTICE.md")
    duplicatesStrategy = DuplicatesStrategy.WARN
}


//https://docs.gradle.org/4.9/userguide/working_with_files.html#sec:reproducible_archives
//Make gradle builds deterministic
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}